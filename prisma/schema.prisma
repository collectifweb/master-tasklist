generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Task {
  id          Int       @id @default(autoincrement())
  name        String
  dueDate     DateTime?
  complexity  Int       @default(1)
  priority    Int       @default(1)
  length      Int       @default(1)
  coefficient Int       @default(1)
  notes       String?
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parentId    Int?
  categoryId  Int       @default(1)
  userId      String?   @db.Uuid
  parent      Task?     @relation("TaskToTask", fields: [parentId], references: [id], onDelete: SetNull)
  children    Task[]    @relation("TaskToTask")
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([parentId])
  @@index([categoryId])
  @@index([userId])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  userId    String?  @db.Uuid
  tasks     Task[]
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}

model User {
  id          String     @id @default(uuid()) @db.Uuid
  name        String?
  email       String     @unique
  password    String
  displaymode String?    @default("light")
  role        String?    @default("user")
  createdAt   DateTime   @default(now())
  tasks       Task[]
  categories  Category[]
  announcementReads UserAnnouncementRead[]
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  category    String   @default("Nouveautés") // "Nouveautés", "Corrections", "Maintenance"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  publishedAt DateTime?
  updatedAt   DateTime @updatedAt
  reads       UserAnnouncementRead[]

  @@index([isActive, publishedAt])
  @@index([category])
}

model UserAnnouncementRead {
  id             Int          @id @default(autoincrement())
  userId         String       @db.Uuid
  announcementId Int
  readAt         DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([userId, announcementId])
  @@index([userId])
  @@index([announcementId])
}